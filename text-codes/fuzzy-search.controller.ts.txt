import { CoreBindings, inject } from '@loopback/core';
import {
  Entity,
  Model,
  ModelDefinition,
  Filter
} from '@loopback/repository';
import { get, getModelSchemaRef, param } from '@loopback/rest';
import Pluralize, {singular} from 'pluralize';

import { FuzzySearchOptions, FuzzySearchService } from '../services';
import { ApplicationClassNameHere } from '..';

export class FuzzySearchController {
  constructor(
    @inject('services.FuzzySearchService')
    private fuzzySearchService: FuzzySearchService,
    @inject(CoreBindings.APPLICATION_INSTANCE)
    private app: ApplicationClassNameHere
  ) {}

  getModelDefinition(modelInstance: Model): ModelDefinition {
    const modelClass = modelInstance.constructor as typeof Entity;
    return modelClass.definition;
  }

  getIdProperty(modelInstance: Model): string {
    const { properties } = this.getModelDefinition(modelInstance);
    let idProperty = '';
    Object.keys(properties).forEach((key: any) => {
      const property = properties[key];
      if (property.id) idProperty = key;
    });
    return idProperty;
  }
  getModelProperties(modelInstance: Model): string[] {
    const modelDefinition = this.getModelDefinition(modelInstance);
    if (!modelDefinition) {
      return [];
    }
    return Object.keys(modelDefinition.properties);
  }
  private search(
    data: any,
    searchTerm: string,
    options: any,
    limit: number
  ): any[] {
    return this.fuzzySearchService.search(
        data,
        searchTerm,
        options,
        limit
      );
  }
  @get('/fuzzy/{searchTerm}', {
    responses: {
      '200': {
        description: 'Fuzzy search results',
        content: {
          'application/json': {
            schema: {
              type: 'array',
              items: getModelSchemaRef(Object),
            },
          },
        },
      },
    },
  })
  async fuzzySearch(
    @param.path.string('searchTerm') searchTerm: string,
    @param.query.number('limit') limit: number,
    @param.query.number('threshold') threshold: number,
    @param.query.object('filter') filter: Filter,
    @param.query.object('excludeModels') exclude: { models: string[] },
    @param.query.object('includeModels') include: { models: string[] },
  ): Promise<object[]> {
    const baseURL = this.app.restServer.url;
    const fetchRepoPromises: any[] = [];
    const modelNames = this.app.findByTag('model');
    const modelPromises: Promise<ModelDefinition>[] = [];

    if (!exclude) exclude = { models: [] }
    if (!include) include = { models: [] }
    
    for (let index = 0; index < modelNames.length; index++) {
      const modelName = modelNames[index];
      modelPromises.push(this.app.get(modelName.key));
    }

    const models: ModelDefinition[] = await Promise.all(modelPromises);

    const matchedModels: string[] = [];
    for (let index = 0; index < models.length; index++) {
      const model: ModelDefinition = models[index];
      const modelPropertiesToValidate: string[] = [];
      const { properties, name } = model.definition;
      Object.keys(properties).forEach(modelProperty => {
        modelPropertiesToValidate.push(modelProperty);
      });
      if (!filter || !filter.where) {
        matchedModels.push(name);
        continue;
      }
      Object.keys(filter.where).forEach(whereProperty => {
        if (modelPropertiesToValidate.includes(whereProperty)) {
          matchedModels.push(name);
        }
      });
    }
    matchedModels.forEach(matchedModel => {
      let repoName = `repositories.${matchedModel}Repository`;
      if (
        !exclude.models.length &&
        !include.models.length
      ) {
        fetchRepoPromises.push(this.app.get(repoName));
      }
      let excludeMatched = false;
      for (let j = 0; j < exclude.models.length; j++) {
        let excludeModel = exclude.models[j];
        excludeModel = excludeModel.toLowerCase();
        excludeModel = singular(excludeModel);

        if (matchedModel.toLocaleLowerCase() === excludeModel) {
          excludeMatched = true;
        }
      }
      let includeMatched = false;
      for (let j = 0; j < include.models.length; j++) {
        let includeModel = include.models[j];
        includeModel = includeModel.toLowerCase();
        includeModel = singular(includeModel);
        if (matchedModel.toLocaleLowerCase() === includeModel) {
          includeMatched = true;
        }
      }

      if (exclude.models.length && !excludeMatched) {
        fetchRepoPromises.push(this.app.get(repoName));
      }
      if (include.models.length && includeMatched) {
        fetchRepoPromises.push(this.app.get(repoName));
      }
    });
    const repositories = await Promise.all(fetchRepoPromises);

    const promises: any = [];
    const options: FuzzySearchOptions = {
      includeScore: true,
      includeMatches: true,
      minMatchCharLength: 3,
      ignoreLocation: true,
      useExtendedSearch: true,
      keys: [],
    };
    if (threshold) { options.threshold = threshold; }

    const modelProperties = new Set<string>();

    if (!filter) filter = {};
    repositories.forEach(repo => { promises.push(repo.find(filter)) });

    const data = await Promise.all(promises);
    const flatData = data.flat();
    flatData.forEach((item: Model) => {
      const properties = this.getModelProperties(item);
      properties.forEach((prop) => { modelProperties.add(prop); });
    });

    options.keys = [...modelProperties];
    searchTerm = decodeURIComponent(searchTerm);
    const flatSearchData = this.search(flatData, searchTerm, options, limit);

    // adding reference and removing duplicate matches
    flatSearchData.forEach((result, index) => {
      const { item, matches } = result;
      const model = item.constructor.name;
      const idKey = this.getIdProperty(item);
      const url = `${baseURL}/${Pluralize(model.toLocaleLowerCase())}/${item[idKey]}`;

      flatSearchData[index] = { ...result, model, url };
      const kvArray = matches.map((entry: any) => {
        const key = ['key', 'value'].map((k: any) => entry[k]).join('|');
        return [key, entry];
      });
      const map = new Map(kvArray);
      const uniqueMatches = Array.from(map.values());
      flatSearchData[index].matches = uniqueMatches;
    });

    return flatSearchData;
  }
}
